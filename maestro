#!/usr/bin/env ruby
# vi: set ft=ruby

require 'pry'
require 'awesome_print'
require 'colorize'
require 'fileutils'
require 'json'
require 'time'
require 'brakeman'

SCRIPT_EXECUTION_PATH = Dir.pwd
ARGV_REPOSITORY_URL = ARGV[0].to_s.strip

class Scanner
  def initialize repo
    @repo = repo
  end

  def output_path
    File.join(@repo.scans_path, name, @repo.latest_rev.commit).tap do |path|
      FileUtils.mkdir_p File.dirname(path)
    end
  end

  def name
    raise NotImplementedError.new("Must implement `name` method")
  end
end

class BrakemanScanner < Scanner
  def scan
    system("cd #{@repo.local_repo_path} && brakeman -o #{output_path}.json")
  end

  def name
    'brakeman'
  end
end

class RubocopScanner < Scanner
  def scan
    system("cd #{@repo.local_repo_path} && rubocop --format progress --format json --out #{output_path}.json")
  end

  def name
    'rubocop'
  end
end

class BundleAuditScanner < Scanner
  def scan
    system("cd #{@repo.local_repo_path} && bundle-audit > #{output_path}.txt")
  end

  def name
    'bundle_audit'
  end
end

class Revision
  attr_reader :commit, :author, :author_email, :date, :message

  LATEST_LOG_TO_JSON_SCRIPT = %q{git log -1 --pretty=format:'{%n "commit": "%H",%n "author": "%an",%n "author_email": "%ae",%n "date": "%ad",%n "message": "%f"%n}'}

  def initialize commit, author, author_email, date, message
    @commit = commit
    @author = author
    @author_email = author_email
    @date = date
    @message = message
  end

  def self.latest_rev_log_for_repo repo
    script_output = `cd #{repo.local_repo_path} && #{LATEST_LOG_TO_JSON_SCRIPT}`
    hash = JSON.parse(script_output.strip, symbolize_names: true)
    new(hash[:commit], hash[:author], hash[:author_email], Time.parse(hash[:date]), hash[:message])
  end
end

class Repository
  attr_reader :remote_repo_url, :local_repo_path, :scans_path, :latest_rev

  def initialize remote_repo_url
    raise "Missing remote repository URL" if remote_repo_url.empty?
    @remote_repo_url = remote_repo_url
    @local_repo_dirname, @local_repo_path, @scans_path = construct_local_repo_path remote_repo_url
  end

  def clone_or_pull_from_remote
    if File.directory? @local_repo_path
      system("cd #{@local_repo_path} && git pull -r")
    else
      system("git clone #{@remote_repo_url} #{@local_repo_path}")
    end
    parse_latest_rev
  end

  def parse_latest_rev
    @latest_rev = Revision.latest_rev_log_for_repo self
  end

  def scan
    [BrakemanScanner, RubocopScanner, BundleAuditScanner].each do |scanner|
      scanner.new(self).scan
    end
  end

  private

  def construct_local_repo_path remote_repo_url
    dir_name = File.basename(remote_repo_url).to_s.split('.').first.to_s
    [
      dir_name,
      File.join(SCRIPT_EXECUTION_PATH, 'repos', dir_name),
      File.join(SCRIPT_EXECUTION_PATH, 'scans', dir_name)
    ]
  end
end

repo = Repository.new ARGV_REPOSITORY_URL
repo.clone_or_pull_from_remote
repo.scan
puts "Current revision: #{repo.latest_rev.inspect}".colorize(:green)
